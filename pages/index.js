import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {useEffect, useState} from "react"


var context = {}

export default function Home() {
  const [port, setPort] = useState()
  const [data, setData] = useState(false)

  const connect = async () => {
    context = {}

    let tempPort = await navigator.serial.requestPort()
    await tempPort.open({baudRate: 115200})
    setPort(tempPort)
    
    context.textEncoder = new TextEncoderStream();
    context.writableStreamClosed = context.textEncoder.readable.pipeTo(tempPort.writable);
    context.writer = context.textEncoder.writable.getWriter();
    context.textDecoder = new TextDecoderStream()
    context.readableStreamClosed = tempPort.readable.pipeTo(context.textDecoder.writable)
    context.reader = context.textDecoder.readable.getReader()
  }

  const getFlightData = async () => {
    console.log("Sending command...")
    await context.writer.write("!flightData\r\n");
    console.log("Reading response...")
    var textStream, done
    while(!done) {
      let {value, done} = await context.reader.read()
      textStream += value
      //console.log(value)
      //console.log(textStream)
      if(value.includes("!end")) break
    }
    textStream = textStream.replace("!end", "")
    textStream = textStream.replace('\r', "")
    textStream = textStream.replace('\n', "")
    textStream = textStream.split("!flightData")[1] 

    console.log("Data:")

    let temp = []
    textStream.split("\r\n").forEach(row => {
      let rowItems = row.split(",")
      let invalid = false

      for(let datum of rowItems) {
        if(typeof(datum) == "undefined") invalid = true
      }

      if(!invalid) {
        temp.push({
          g: rowItems[0],
          a: rowItems[1],
          alt: rowItems[2],
          ts: rowItems[3]
        })
      }
    })
    console.log(temp)
    //console.log(textStream)
    close()
  }

  const close = async () => {
    context.reader.releaseLock()
    context.writer.releaseLock()
    let writableStreamClosed = context.textEncoder.readable.pipeTo(port.writable)

    context.writer.close()
    await writableStreamClosed

    await port.close()
  }

  return (
    <div className="min-w-screen min-h-screen bg-base-100">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <button className="btn btn-primary" onClick={connect}>Connect</button>
        <button className="btn btn-primary" onClick={getFlightData}>Get Data</button>
      </main>
    </div>
  )
}
